pool:
  vmImage: Ubuntu-16.04

steps:
  - checkout: self
    lfs: true

  - task: NodeTool@0
    displayName: Install Node.js
    inputs:
      versionSpec: 12.4.0

  - script: yarn install --frozen-lockfile
    displayName: Install dependencies

  - script: yarn lint
    displayName: Lint source code

  - script: yarn prettier:check
    displayName: Check code format

  - script: yarn copy:paste:detector
    displayName: Copy/Paste detector

  - task: PublishPipelineArtifact@0
    displayName: Publish jscpd HTML report
    condition: failed()
    inputs:
      artifactName: 'CopyPasteDetectorReport'
      targetPath: 'target/jscpd-report.html'

  - script: yarn compile
    displayName: Compile source code

  - script: npm run test:unit:ci
    displayName: Run unit tests

  - task: PublishTestResults@2
    inputs:
      testResultsFiles: 'target/test-results.xml'
      testRunTitle: Test results for JavaScript
    condition: succeededOrFailed()

  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: $(System.DefaultWorkingDirectory)/target/coverage/cobertura-coverage.xml
      reportDirectory: $(System.DefaultWorkingDirectory)/target/coverage

  - script: yarn build:visual
    displayName: Build application for visual regression and e2e tests
    env:
      GITHUB_TOKEN: $(GITHUB_TOKEN)

  - script: yarn test:e2e
    displayName: Run e2e tests

  - script: yarn test:visual
    displayName: Run visual regression tests

  - task: PublishPipelineArtifact@0
    displayName: Publish visual regression HTML report
    condition: failed()
    inputs:
      artifactName: 'VisualRegressionResults'
      targetPath: 'test/visual/backstop_data'

  - task: PublishTestResults@2
    displayName: Publish visual regression test results
    condition: succeededOrFailed()
    inputs:
      testResultsFormat: JUnit
      testResultsFiles: test/visual/backstop_data/ci_report/xunit.xml

  - script: yarn build
    displayName: Build application for production
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    env:
      GITHUB_TOKEN: $(GITHUB_TOKEN)

  - script: yarn netlify deploy --prod
    displayName: Production deploy to Netlify
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    env:
      NETLIFY_AUTH_TOKEN: $(NETLIFY_AUTH_TOKEN)
      NETLIFY_SITE_ID: $(NETLIFY_SITE_ID)

  - script: yarn netlify deploy
    displayName: Branch deploy to Netlify
    condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))
    env:
      NETLIFY_AUTH_TOKEN: $(NETLIFY_AUTH_TOKEN)
      NETLIFY_SITE_ID: $(NETLIFY_SITE_ID)
